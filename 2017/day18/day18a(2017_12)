# It seems like the assembly is meant to operate on a set of registers that are each named with a single letter and that can each hold a single integer. You suppose each register should start with a value of 0.
# There aren't that many instructions, so it shouldn't be hard to figure out what they do. Here's what you determine:
#
# snd X plays a sound with a frequency equal to the value of X.
# set X Y sets register X to the value of Y.
# add X Y increases register X by the value of Y.
# mul X Y sets register X to the result of multiplying the value contained in register X by the value of Y.
# mod X Y sets register X to the remainder of dividing the value contained in register X by the value of Y (that is, it sets X to the result of X modulo Y).
# rcv X recovers the frequency of the last sound played, but only when the value of X is not zero. (If it is zero, the command does nothing.)
# jgz X Y jumps with an offset of the value of Y, but only if the value of X is greater than zero. (An offset of 2 skips the next instruction, an offset of -1 jumps to the previous instruction, and so on.)
#
# Many of the instructions can take either a register (a single letter) or a number. The value of a register is the integer it contains; the value of a number is that number.
# After each jump instruction, the program continues with the instruction to which the jump jumped. After any other instruction, the program continues with the next instruction. Continuing (or jumping) off either end of the program terminates it.
#
# What is the value of the recovered frequency (the value of the most recently played sound) the first time a rcv instruction is executed with a non-zero value?

# implement instruction and find out next one
def to_do(data, regs, step):
    inst = data[step][0]
    if inst == 'snd':
        value = data[step][1]
        if value in regs:
            value = regs[value]
        regs = snd_r(regs, value)
        step += 1
    elif inst == 'rcv':
        value = data[step][1]
        if value in regs:
            value = regs[value]
        step = rcv_r(regs, value, step)
    else:
        reg = data[step][1]
        value = data[step][2]
        if value in regs:
            value = regs[value]
        if inst == 'set':
            regs = set_r(regs, reg, value)
            step += 1
        elif inst == 'add':
            regs = add_r(regs, reg, value)
            step += 1
        elif inst == 'mul':
            regs = mul_r(regs, reg, value)
            step += 1
        elif inst == 'mod':
            regs = mod_r(regs, reg, value)
            step += 1
        else:
            if reg == '1':
                step += 3
            else:
                step = jgz_r(regs, reg, value, step)
    return regs, step
                
# set of instructions
def snd_r(regs, value):
    regs['mem'] = int(value)
    return regs

def set_r(regs, reg, value):
    regs[reg] = int(value)
    return regs

def add_r(regs, reg, value):
    regs[reg] += int(value)
    return regs

def mul_r(regs, reg, value):
    regs[reg] *= int(value)
    return regs

def mod_r(regs, reg, value):
    regs[reg] = regs[reg] % int(value)
    return regs

def rcv_r(regs, value, step):
    if value != 0:
        print(regs['mem'])
    step += 1
    return step

def jgz_r(regs, reg, value, step):
    if regs[reg] > 0:
        step += int(value)
    else:
        step += 1
    return step
    
# create data
data = {}
regs = {}
for i in range(41):
    s = input()
    data[i] = [word for word in s.split()]
    reg = data[i][1]
    if reg not in regs and reg != '1':
        regs[reg] = 0

step = 0
regs['mem'] = 0

while True:
    regs, step = to_do(data, regs, step)
