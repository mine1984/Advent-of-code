# It seems like the assembly is meant to operate on a set of registers that are each named with a single letter and that can each hold a single integer. You suppose each register should start with a value of 0.
# There aren't that many instructions, so it shouldn't be hard to figure out what they do. Here's what you determine:
#
# snd X plays a sound with a frequency equal to the value of X.
# set X Y sets register X to the value of Y.
# add X Y increases register X by the value of Y.
# mul X Y sets register X to the result of multiplying the value contained in register X by the value of Y.
# mod X Y sets register X to the remainder of dividing the value contained in register X by the value of Y (that is, it sets X to the result of X modulo Y).
# rcv X recovers the frequency of the last sound played, but only when the value of X is not zero. (If it is zero, the command does nothing.)
# jgz X Y jumps with an offset of the value of Y, but only if the value of X is greater than zero. (An offset of 2 skips the next instruction, an offset of -1 jumps to the previous instruction, and so on.)
#
# Many of the instructions can take either a register (a single letter) or a number. The value of a register is the integer it contains; the value of a number is that number.
# After each jump instruction, the program continues with the instruction to which the jump jumped. After any other instruction, the program continues with the next instruction. Continuing (or jumping) off either end of the program terminates it.
#
# As you congratulate yourself for a job well done, you notice that the documentation has been on the back of the tablet this entire time. While you actually got most of the instructions correct, there are a few key differences. This assembly code isn't about sound at all - it's meant to be run twice at the same time.
# Each running copy of the program has its own set of registers and follows the code independently - in fact, the programs don't even necessarily run at the same speed. To coordinate, they use the send (snd) and receive (rcv) instructions:
#
# snd X sends the value of X to the other program. These values wait in a queue until that program is ready to receive them. Each program has its own message queue, so a program can never receive a message it sent.
# rcv X receives the next value and stores it in register X. If no values are in the queue, the program waits for a value to be sent to it. Programs do not continue to the next instruction until they have received a value. Values are received in the order they are sent.
#
# Each program also has its own program ID (one 0 and the other 1); the register p should begin with this value.
#
# how many times did program 1 send a value?

##########################
The program doesn't work correctly. It doubles the actual value, and I got no idea why.
##########################

# implement instruction and find out next one
def to_do(data, regs, queues):
    step = regs['step']
    inst = data[step][0]
    if inst == 'snd':
        value = data[step][1]
        if value == 'p':
            if regs['id'] == 'a':
                value = 0
            if regs['id'] == 'b':
                value = 1
        if value in regs:
            value = regs[value]
        regs, queues = snd_r(regs, value, queues)
        step += 1
    elif inst == 'rcv':
        value = data[step][1]
        #if value in regs:
        #    value = regs[value]
        step, regs, queues = rcv_r(regs, value, step, queues)
    else:
        reg = data[step][1]
        value = data[step][2]
        if value in regs:
            value = regs[value]
        if inst == 'set':
            regs = set_r(regs, reg, value)
            step += 1
        elif inst == 'add':
            regs = add_r(regs, reg, value)
            step += 1
        elif inst == 'mul':
            regs = mul_r(regs, reg, value)
            step += 1
        elif inst == 'mod':
            regs = mod_r(regs, reg, value)
            step += 1
        else:
            if reg == '1':
                step += 3
            else:
                step = jgz_r(regs, reg, value, step)
    regs['step'] = step
    return regs
                
# set of instructions
def snd_r(regs, value, queues):
    if regs['id'] == 'a':
        queues['b'].append(int(value))
    if regs['id'] == 'b':
        queues['a'].append(int(value))
    regs['count'] += 1
    return regs, queues

def set_r(regs, reg, value):
    regs[reg] = int(value)
    return regs

def add_r(regs, reg, value):
    regs[reg] += int(value)
    return regs

def mul_r(regs, reg, value):
    regs[reg] *= int(value)
    return regs

def mod_r(regs, reg, value):
    regs[reg] = regs[reg] % int(value)
    return regs

def rcv_r(regs, value, step, queues):
    if value != 0:
        if regs['id'] == 'a':
            #if queues['a']:
                new_value = queues['a'].pop(0)
            #else:
            #    return step, regs, queues
        if regs['id'] == 'b':
            #if queues['b']:
                new_value = queues['b'].pop(0)
            #else:
            #    return step, regs, queues
        regs = set_r(regs, value, new_value)
    step += 1
    return step, regs, queues

def jgz_r(regs, reg, value, step):
    if regs[reg] > 0:
        step += int(value)
    else:
        step += 1
    return step
    
# create data
data = {}
regs = {}
for i in range(41):
    s = input()
    data[i] = [word for word in s.split()]
    reg = data[i][1]
    if reg not in regs and reg != '1':
        regs[reg] = 0

# create both programs
regs['step'] = 0
regs['work'] = 1
regs['count'] = 0
queues = {'a':[],'b':[]}
regs_a = dict(regs)
regs_b = dict(regs)
regs_a['id'] = 'a'
regs_b['id'] = 'b'

while True:
    error = 0
    if data[regs_a['step']][0] == 'rcv' and queues['a'] == []:
        error += 1
    else:
        regs_a = to_do(data, regs_a, queues)
    if data[regs_b['step']][0] == 'rcv' and queues['b'] == []:
        error += 1
    else:
        regs_b = to_do(data, regs_b, queues)
    if error == 2:
        print(regs_a['count'],regs_b['count'])
        break
