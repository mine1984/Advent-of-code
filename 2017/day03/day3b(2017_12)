# Each square on the grid is allocated in a spiral pattern starting at a location marked 1 and then counting up while spiraling outward. For example, the first few squares are allocated like this:
#
# 17  16  15  14  13
# 18   5   4   3  12
# 19   6   1   2  11
# 20   7   8   9  10
# 21  22  23---> ...
# The programs here clear the grid and then store the value 1 in square 1. Then, in the same allocation order as shown above, they store the sum of the values in all adjacent squares, including diagonals.
# What is the first value written that is larger than puzzle input?

# find next step on a spiral
def next_step(x,y):
    if x == 0 and y == 0:
        return 1,0
    if y >= x and y > -x:
        return x-1,y
    if y <= -x and y > x:
        return x,y-1
    if y <= x and y < -x+1:
        return x+1,y
    if y >= -x+1 and y < x:
        return x, y+1

# find sum of neighbours
def find_value(x,y,grid):
    x_vec = [1,1,0,-1,-1,-1,0,1]
    y_vec = [0,1,1,1,0,-1,-1,-1]
    value = 0
    for i in range(8):
        if (x+x_vec[i],y+y_vec[i]) in grid:
            value += grid[(x+x_vec[i],y+y_vec[i])]
    return value

# initials
inp = 312051
cur_x = 0
cur_y = 0
grid = {(0,0):1}
value = 1

while value <= inp:
    cur_x,cur_y = next_step(cur_x,cur_y)
    value = find_value(cur_x,cur_y,grid)
    grid[(cur_x,cur_y)] = value

print(value)
