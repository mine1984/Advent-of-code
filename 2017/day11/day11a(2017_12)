# The hexagons ("hexes") in this grid are aligned such that adjacent hexes can be found to the north, northeast, southeast, south, southwest, and northwest.
#
# Starting where he started, you need to determine the fewest number of steps required to reach him.

inp_list = [inp for inp in input().split(',')]
print(inp_list)

to_go = {'ne':(1,0),'n':(0,1),'nw':(-1,1),'sw':(-1,0),'s':(0,-1),'se':(1,-1)}

x=0
y=0
for step in inp_list:
    x += to_go[step][0]
    y += to_go[step][1]
print(x,y)

result = 0
while x != 0 or y != 0:
    if x > 0 and y < 0:
        x += -1
        y += 1
    elif x < 0 and y > 0:
        x += 1
        y += -1
    elif x < 0:
        x += 1
    elif x > 0:
        x += -1
    elif y < 0:
        y += 1
    elif y > 0:
        y += -1
    result += 1
print(result)
