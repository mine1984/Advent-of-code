# One program at the bottom supports the entire tower. It's holding a large disc, and on the disc are balanced several more sub-towers. At the bottom of these sub-towers, standing on the bottom disc, are other programs, each holding their own disc, and so on. At the very tops of these sub-sub-sub-...-towers, many programs stand simply keeping the disc below them balanced but with no disc of their own.
#
# You offer to help, but first you need to understand the structure of these towers. You ask each program to yell out their name, their weight, and (if they're holding a disc) the names of the programs immediately above them balancing on that disc. You write this information down (your puzzle input). Unfortunately, in their panic, they don't do this in an orderly fashion; by the time you're done, you're not sure which program gave which information.
#
# For example, if your list is the following:
#
#pbga (66)
#xhth (57)
#ebii (61)
#havc (66)
#ktlj (57)
#fwft (72) -> ktlj, cntj, xhth
#qoyq (66)
#padx (45) -> pbga, havc, qoyq
#tknk (41) -> ugml, padx, fwft
#jptl (61)
#ugml (68) -> gyxo, ebii, jptl
#gyxo (61)
#cntj (57)
#
# What is the name of the bottom program?


# Morph string into data of disk masses and who holds whom.
masses = {}
holds = {}
for i in range(1059):
    s = input()
    if s.find('-') == -1:
        name, mass = s.split()
        masses[name] = int(mass[1:-1])
    else:
        s = [item for item in s.split()]
        name = s[0]
        mass = int(s[1][1:-1])
        masses[name] = mass
        holds[name] = []
        for i in range(3,len(s)):
            if i != len(s)-1:
                holds[name].append(s[i][:-1])
            else:
                holds[name].append(s[i])

# Find disk that doesn't hold anyone.
watched = []
for disk in holds:
    for child_disk in holds[disk]:
        if child_disk not in watched:
            watched.append(child_disk)
for disk in holds:
    if disk not in watched:
        print(disk)
