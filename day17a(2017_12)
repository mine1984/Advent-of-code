# This spinlock's algorithm is simple but efficient, quickly consuming everything in its path. It starts with a circular buffer containing only the value 0, which it marks as the current position. It then steps forward through the circular buffer some number of steps (your puzzle input) before inserting the first new value, 1, after the value it stopped on. The inserted value becomes the current position. Then, it steps forward from there the same number of steps, and wherever it stops, inserts after it the second new value, 2, and uses that as the new current position again.
# It repeats this process of stepping forward, inserting a new value, and using the location of the inserted value as the new current position a total of 2017 times, inserting 2017 as its final operation, and ending with a total of 2018 values (including 0) in the circular buffer.
#
# What is the value after 2017 in your completed circular buffer?

# initials
inp = 371
lock = [0]
pos = 0

# find positionm of next insert
def cycle(lock,inp,pos):
    for i in range(inp):
        pos = (pos+1)%len(lock)
    return pos+1

count = 0

# create lock
for i in range(2017):
    count += 1
    pos = cycle(lock,inp,pos)
    lock.insert(pos,count)

print(lock[pos+1])
