# By studying the firewall briefly, you are able to record (in your puzzle input) the depth of each layer and the range of the scanning area for the scanner within it, written as depth: range. Each layer has a thickness of exactly 1. A layer at depth 0 begins immediately inside the firewall; a layer at depth 1 would start immediately after that.
# Within each layer, a security scanner moves back and forth within its range. Each security scanner starts at the top and moves down until it reaches the bottom, then moves up until it reaches the top, and repeats.
# Your plan is to hitch a ride on a packet about to move through the firewall. The packet will travel along the top of each layer, and it moves at one layer per picosecond. Each picosecond, the packet moves one layer forward (its first move takes it into layer 0), and then the scanners move one step. If there is a scanner at the top of the layer as your packet enters it, you are caught. (If a scanner moves into the top of its layer while you are there, you are not caught: it doesn't have time to notice you before you leave.)
# The severity of getting caught on a layer is equal to its depth multiplied by its range. (Ignore layers in which you do not get caught.)
#
# What is the severity of your whole trip?


# update all levels by 1 step
def step(data):
    for level in data:
        max_l = data[level][0]
        cur_l = data[level][1]
        inst = data[level][2]
        if inst == '+':
            if cur_l<max_l:
                data[level][1] += 1
            else:
                data[level][2] = '-'
                data[level][1] += -1
        else:
            if cur_l>1:
                data[level][1] += -1
            else:
                data[level][2] = '+'
                data[level][1] += 1
    return data

# morph data into db
data = {}
for i in range(43):
    s=[word for word in input().split()]
    for word in s:
        if word[-1] == ':':
            s[0] = word[:-1]
    data[int(s[0])] = [int(s[1]),2,'-']
    if i == 42:
        max_level = int(s[0])
#print(max_level,data)

# find caught levels
caught = []
for i in range(max_level):
    data = step(data)
    if i in data:
        if data[i][1] == 1:
            caught.append(i)
#print(caught)

result = 0
for level in caught:
    result += level*data[level][0]
print(result)
