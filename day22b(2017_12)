# The local grid computing cluster has been contaminated with the Sporifica Virus. The grid computing cluster is a seemingly-infinite two-dimensional grid of compute nodes. Each node is either clean or infected by the virus.
# To prevent overloading the nodes (which would render them useless to the virus) or detection by system administrators, exactly one virus carrier moves through the network, infecting or cleaning nodes as it moves. The virus carrier is always located on a single node in the network (the current node) and keeps track of the direction it is facing.
# To avoid detection, the virus carrier works in bursts; in each burst, it wakes up, does some work, and goes back to sleep. The following steps are all executed in order one time each burst:
#
# If the current node is infected, it turns to its right. Otherwise, it turns to its left. (Turning is done in-place; the current node does not change.)
# If the current node is clean, it becomes infected. Otherwise, it becomes cleaned. (This is done after the node is considered for the purposes of changing direction.)
# The virus carrier moves forward one node in the direction it is facing.
#
# Diagnostics have also provided a map of the node infection status (your puzzle input). Clean nodes are shown as .; infected nodes are shown as #. This map only shows the center of the grid; there are many more nodes beyond those shown, but none of them are currently infected.
# The virus carrier begins in the middle of the map facing up.
#
# Now, before it infects a clean node, it will weaken it to disable your defenses. If it encounters an infected node, it will instead flag the node to be cleaned in the future. So:
#
# Clean nodes become weakened.
# Weakened nodes become infected.
# Infected nodes become flagged.
# Flagged nodes become clean.
#
# Every node is always in exactly one of the above states.
# The virus carrier still functions in a similar way, but now uses the following logic during its bursts of action:
# Decide which way to turn based on the current node:
#
# If it is clean, it turns left.
# If it is weakened, it does not turn, and will continue moving in the same direction.
# If it is infected, it turns right.
# If it is flagged, it reverses direction, and will go back the way it came.
#
# Modify the state of the current node, as described above.
# The virus carrier moves forward one node in the direction it is facing.
# Start with the same map (still using . for clean and # for infected) and still with the virus carrier starting in the middle and facing up.
#
# Given your actual map, after 10000000 bursts of activity, how many bursts cause a node to become infected?

# Implement algorithm
def step(data, x, y, direct, count):
    if (x,y) not in data:
        data[(x,y)] = '.'
    if data[(x,y)] == '.':
        data[(x,y)] = 'W'
        if direct == 'up':
            direct = 'left'
            x = x-1
        elif direct == 'left':
            direct = 'down'
            y = y+1
        elif direct == 'down':
            direct = 'right'
            x = x+1
        else:
            direct = 'up'
            y = y-1
    elif data[(x,y)] == '#':
        data[(x,y)] = 'F'
        if direct == 'up':
            direct = 'right'
            x = x+1
        elif direct == 'right':
            direct = 'down'
            y = y+1
        elif direct == 'down':
            direct = 'left'
            x = x-1
        else:
            direct = 'up'
            y = y-1
    elif data[(x,y)] == 'F':
        data[(x,y)] = '.'
        if direct == 'up':
            direct = 'down'
            y = y+1
        elif direct == 'right':
            direct = 'left'
            x = x-1
        elif direct == 'down':
            direct = 'up'
            y = y-1
        else:
            direct = 'right'
            x = x+1
    else:
        data[(x,y)] = '#'
        count += 1
        if direct == 'up':
            y = y-1
        elif direct == 'right':
            x = x+1
        elif direct == 'down':
            y = y+1
        else:
            x = x-1
    return data, x, y, direct, count

# make data
data = {}
for j in range(25):
    s = input()
    for i in range(25):
        data[(i,j)] = s[i]
print(data)

# initials
x=12
y=12
direct = 'up'
count = 0

# main
for m in range(10000000):
    data, x, y, direct, count = step(data, x, y, direct, count)
print(count)
